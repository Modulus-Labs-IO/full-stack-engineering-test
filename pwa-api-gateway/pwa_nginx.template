pid pids/nginx.pid;
error_log ${{PROXY_ERROR_LOG}} ${{LOG_LEVEL}};

# injected nginx_main_* directives
daemon off;
# user kong kong;
worker_processes auto;
worker_rlimit_nofile 16384;

events {
    # injected nginx_events_* directives
> for _, el in ipairs(nginx_events_directives) do
    $(el.name) $(el.value);
> end
}

http {
    server_tokens off;

    more_set_headers 'Server: PWA/1.0';
    more_clear_headers 'x-powered-by';
    more_clear_headers 'via';
    more_clear_headers 'x-kong-proxy-latency';
    more_clear_headers 'x-kong-upstream-latency';  
    
    error_log ${{PROXY_ERROR_LOG}} ${{LOG_LEVEL}};

    lua_package_path       '${{LUA_PACKAGE_PATH}};;';
    lua_package_cpath      '${{LUA_PACKAGE_CPATH}};;';
    lua_socket_pool_size   ${{LUA_SOCKET_POOL_SIZE}};
    lua_socket_log_errors  off;
    lua_max_running_timers 4096;
    lua_max_pending_timers 16384;
    lua_ssl_verify_depth   ${{LUA_SSL_VERIFY_DEPTH}};
> if lua_ssl_trusted_certificate_combined then
    lua_ssl_trusted_certificate '${{LUA_SSL_TRUSTED_CERTIFICATE_COMBINED}}';
> end

    lua_shared_dict kong                        5m;
    lua_shared_dict kong_locks                  8m;
    lua_shared_dict kong_healthchecks           5m;
    lua_shared_dict kong_process_events         5m;
    lua_shared_dict kong_cluster_events         5m;
    lua_shared_dict kong_rate_limiting_counters 12m;
    lua_shared_dict kong_core_db_cache          ${{MEM_CACHE_SIZE}};
    lua_shared_dict kong_core_db_cache_miss     12m;
    lua_shared_dict kong_db_cache               ${{MEM_CACHE_SIZE}};
    lua_shared_dict kong_db_cache_miss          12m;

    underscores_in_headers on;
> if ssl_ciphers then
    ssl_ciphers ${{SSL_CIPHERS}};
> end

    # injected nginx_http_* directives
> for _, el in ipairs(nginx_http_directives) do
    $(el.name) $(el.value);
> end

    init_by_lua_block {
        Kong = require 'kong'
        Kong.init()
    }

    init_worker_by_lua_block {
        Kong.init_worker()
    }

    exit_worker_by_lua_block {
        Kong.exit_worker()
    }

    # Load variable indexes
    lua_kong_load_var_index default;

    upstream kong_upstream {
        server 0.0.0.1;

        # injected nginx_upstream_* directives

        balancer_by_lua_block {
            Kong.balancer()
        }
    }

    server {
        listen 8080;
        server_name kong;
        return 301 https://$host$request_uri;
    } 

    server {
        server_name kong;
        listen 0.0.0.0:8443 ssl http2 reuseport backlog=16384;
        
        client_max_body_size 10240M;

        error_page 400 404 405 408 411 412 413 414 417 494 /kong_error_handler;
        error_page 500 502 503 504                     /kong_error_handler;

        access_log ${{PROXY_ACCESS_LOG}};
        error_log  ${{PROXY_ERROR_LOG}} ${{LOG_LEVEL}};

> if proxy_ssl_enabled then
> for i = 1, #ssl_cert do
        ssl_certificate     $(ssl_cert[i]);
        ssl_certificate_key $(ssl_cert_key[i]);
> end
        ssl_session_cache   shared:SSL:10m;
        ssl_certificate_by_lua_block {
            Kong.ssl_certificate()
        }
> end

        # injected nginx_proxy_* directives
> for _, el in ipairs(nginx_proxy_directives) do
        $(el.name) $(el.value);
> end
> for _, ip in ipairs(trusted_ips) do
        set_real_ip_from $(ip);
> end

        rewrite_by_lua_block {
            Kong.rewrite()
        }

        access_by_lua_block {
            Kong.access()
        }

        header_filter_by_lua_block {
            Kong.header_filter()
        }

        body_filter_by_lua_block {
            Kong.body_filter()
        }

        log_by_lua_block {
            Kong.log()
        }

        # This will enforce HTTP browsing into HTTPS and avoid ssl stripping attack
        proxy_hide_header Strict-Transport-Security;
        add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always; 

        # X-Frame-Options is to prevent from clickJacking attack
        proxy_hide_header X-Frame-Options;
        add_header X-Frame-Options SAMEORIGIN always;  

        # This header enables the Cross-site scripting (XSS) filter
        proxy_hide_header X-XSS-Protection;
        add_header X-XSS-Protection "1; mode=block" always;   

        #  disable content-type sniffing on some browsers.
        proxy_hide_header X-Content-Type-Options;
        add_header X-Content-Type-Options nosniff always;

        # This header enables Content-Security-Policy in HTTP responses
        proxy_hide_header Content-Security-Policy;    
        add_header Content-Security-Policy "default-src 'none'; base-uri https://$host; form-action https://$host; frame-ancestors https://$host https://$host:*; object-src 'none'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; img-src 'self' data: https:; media-src 'self' data: https:; style-src 'self' 'unsafe-inline' 'unsafe-hashes'; font-src 'self'; frame-src https://$host https://$host:*; connect-src 'self' https://fakestoreapi.com https://login.microsoftonline.com;" always; 

        # This header enables Referrer-Policy 
        proxy_hide_header Referrer-Policy;
        add_header Referrer-Policy "strict-origin" always;   

        # This header locks CORS to the host
        proxy_hide_header Access-Control-Allow-Origin;
        add_header Access-Control-Allow-Origin $host always;

        # disable cross domain policies
        proxy_hide_header X-Permitted-Cross-Domain-Policies;
        add_header X-Permitted-Cross-Domain-Policies none;
        
        location ~ ^/static/(.*?)/((.*html*|.*css*|.*js*|.*json*|.*jpe?g*|.*png*|.*svg*|.*pdf*|.*gif*|.*ico*|.*woff2*|.*woff*|.*mp3*|.*mp4*|.*wav*|.*ogg*|.*webm*)[^/]+$) {
            resolver            127.0.0.11 ipv6=off;
            proxy_pass          http://$1:80/$2;
            proxy_set_header    Host               $host;
            proxy_set_header    X-Real-IP          $remote_addr;
            proxy_set_header    X-Forwarded-For    $proxy_add_x_forwarded_for;
            proxy_set_header    X-Forwarded-Host   $host;
            proxy_set_header    X-Forwarded-Server $host;
            proxy_set_header    X-Forwarded-Port   $server_port;
            proxy_set_header    X-Forwarded-Proto  $scheme;     
        }

        location / {
            proxy_pass          http://pwa-ui:8080;
            proxy_set_header    Host               $host;
            proxy_set_header    X-Real-IP          $remote_addr;
            proxy_set_header    X-Forwarded-For    $proxy_add_x_forwarded_for;
            proxy_set_header    X-Forwarded-Host   $host;
            proxy_set_header    X-Forwarded-Server $host;
            proxy_set_header    X-Forwarded-Port   $server_port;
            proxy_set_header    X-Forwarded-Proto  $scheme;
        }        
                
        location /api/ {
            default_type                     '';

            set $ctx_ref                     '';
            set $upstream_te                 '';
            set $upstream_host               '';
            set $upstream_upgrade            '';
            set $upstream_connection         '';
            set $upstream_scheme             '';
            set $upstream_uri                '';
            set $upstream_x_forwarded_for    '';
            set $upstream_x_forwarded_proto  '';
            set $upstream_x_forwarded_host   '';
            set $upstream_x_forwarded_port   '';
            set $upstream_x_forwarded_path   '';
            set $upstream_x_forwarded_prefix '';
            set $kong_proxy_mode             'http';

            proxy_http_version      1.1;
            proxy_buffering          on;
            proxy_request_buffering  on;

            proxy_set_header      TE                 $upstream_te;
            proxy_set_header      Host               $upstream_host;
            proxy_set_header      Upgrade            $upstream_upgrade;
            proxy_set_header      Connection         $upstream_connection;
            proxy_set_header      X-Forwarded-For    $upstream_x_forwarded_for;
            proxy_set_header      X-Forwarded-Proto  $upstream_x_forwarded_proto;
            proxy_set_header      X-Forwarded-Host   $upstream_x_forwarded_host;
            proxy_set_header      X-Forwarded-Port   $upstream_x_forwarded_port;
            proxy_set_header      X-Forwarded-Path   $upstream_x_forwarded_path;
            proxy_set_header      X-Forwarded-Prefix $upstream_x_forwarded_prefix;
            proxy_set_header      X-Real-IP          $remote_addr;
            proxy_pass_header     Server;
            proxy_pass_header     Date;
            proxy_ssl_name        $upstream_host;
            proxy_ssl_server_name on;
> if client_ssl then
            proxy_ssl_certificate ${{CLIENT_SSL_CERT}};
            proxy_ssl_certificate_key ${{CLIENT_SSL_CERT_KEY}};
> end            
            proxy_pass            $upstream_scheme://kong_upstream$upstream_uri;
        }

        location @unbuffered {
            internal;
            default_type         '';
            set $kong_proxy_mode 'unbuffered';

            proxy_http_version      1.1;
            proxy_buffering         off;
            proxy_request_buffering off;

            proxy_set_header      TE                 $upstream_te;
            proxy_set_header      Host               $upstream_host;
            proxy_set_header      Upgrade            $upstream_upgrade;
            proxy_set_header      Connection         $upstream_connection;
            proxy_set_header      X-Forwarded-For    $upstream_x_forwarded_for;
            proxy_set_header      X-Forwarded-Proto  $upstream_x_forwarded_proto;
            proxy_set_header      X-Forwarded-Host   $upstream_x_forwarded_host;
            proxy_set_header      X-Forwarded-Port   $upstream_x_forwarded_port;
            proxy_set_header      X-Forwarded-Path   $upstream_x_forwarded_path;
            proxy_set_header      X-Forwarded-Prefix $upstream_x_forwarded_prefix;
            proxy_set_header      X-Real-IP          $remote_addr;
            proxy_pass_header     Server;
            proxy_pass_header     Date;
            proxy_ssl_name        $upstream_host;
            proxy_ssl_server_name on;
> if client_ssl then
            proxy_ssl_certificate ${{CLIENT_SSL_CERT}};
            proxy_ssl_certificate_key ${{CLIENT_SSL_CERT_KEY}};
> end            
            proxy_pass            $upstream_scheme://kong_upstream$upstream_uri;
        }

        location @unbuffered_request {
            internal;
            default_type         '';
            set $kong_proxy_mode 'unbuffered';

            proxy_http_version      1.1;
            proxy_buffering          on;
            proxy_request_buffering off;

            proxy_set_header      TE                 $upstream_te;
            proxy_set_header      Host               $upstream_host;
            proxy_set_header      Upgrade            $upstream_upgrade;
            proxy_set_header      Connection         $upstream_connection;
            proxy_set_header      X-Forwarded-For    $upstream_x_forwarded_for;
            proxy_set_header      X-Forwarded-Proto  $upstream_x_forwarded_proto;
            proxy_set_header      X-Forwarded-Host   $upstream_x_forwarded_host;
            proxy_set_header      X-Forwarded-Port   $upstream_x_forwarded_port;
            proxy_set_header      X-Forwarded-Path   $upstream_x_forwarded_path;
            proxy_set_header      X-Forwarded-Prefix $upstream_x_forwarded_prefix;
            proxy_set_header      X-Real-IP          $remote_addr;
            proxy_pass_header     Server;
            proxy_pass_header     Date;
            proxy_ssl_name        $upstream_host;
            proxy_ssl_server_name on;
> if client_ssl then
            proxy_ssl_certificate ${{CLIENT_SSL_CERT}};
            proxy_ssl_certificate_key ${{CLIENT_SSL_CERT_KEY}};
> end            
            proxy_pass            $upstream_scheme://kong_upstream$upstream_uri;
        }

        location @unbuffered_response {
            internal;
            default_type         '';
            set $kong_proxy_mode 'unbuffered';

            proxy_http_version      1.1;
            proxy_buffering         off;
            proxy_request_buffering  on;

            proxy_set_header      TE                 $upstream_te;
            proxy_set_header      Host               $upstream_host;
            proxy_set_header      Upgrade            $upstream_upgrade;
            proxy_set_header      Connection         $upstream_connection;
            proxy_set_header      X-Forwarded-For    $upstream_x_forwarded_for;
            proxy_set_header      X-Forwarded-Proto  $upstream_x_forwarded_proto;
            proxy_set_header      X-Forwarded-Host   $upstream_x_forwarded_host;
            proxy_set_header      X-Forwarded-Port   $upstream_x_forwarded_port;
            proxy_set_header      X-Forwarded-Path   $upstream_x_forwarded_path;
            proxy_set_header      X-Forwarded-Prefix $upstream_x_forwarded_prefix;
            proxy_set_header      X-Real-IP          $remote_addr;
            proxy_pass_header     Server;
            proxy_pass_header     Date;
            proxy_ssl_name        $upstream_host;
            proxy_ssl_server_name on;
> if client_ssl then
            proxy_ssl_certificate ${{CLIENT_SSL_CERT}};
            proxy_ssl_certificate_key ${{CLIENT_SSL_CERT_KEY}};
> end            
            proxy_pass            $upstream_scheme://kong_upstream$upstream_uri;
        }

        location @grpc {
            internal;
            default_type         '';
            set $kong_proxy_mode 'grpc';

            grpc_set_header      TE                 $upstream_te;
            grpc_set_header      X-Forwarded-For    $upstream_x_forwarded_for;
            grpc_set_header      X-Forwarded-Proto  $upstream_x_forwarded_proto;
            grpc_set_header      X-Forwarded-Host   $upstream_x_forwarded_host;
            grpc_set_header      X-Forwarded-Port   $upstream_x_forwarded_port;
            grpc_set_header      X-Forwarded-Path   $upstream_x_forwarded_path;
            grpc_set_header      X-Forwarded-Prefix $upstream_x_forwarded_prefix;
            grpc_set_header      X-Real-IP          $remote_addr;
            grpc_pass_header     Server;
            grpc_pass_header     Date;
            grpc_ssl_name        $upstream_host;
            grpc_ssl_server_name on;
> if client_ssl then
            grpc_ssl_certificate ${{CLIENT_SSL_CERT}};
            grpc_ssl_certificate_key ${{CLIENT_SSL_CERT_KEY}};
> end            
            grpc_pass            $upstream_scheme://kong_upstream;
        }

        location = /kong_buffered_http {
            internal;
            default_type         '';
            set $kong_proxy_mode 'http';

            rewrite_by_lua_block       {;}
            access_by_lua_block        {;}
            header_filter_by_lua_block {;}
            body_filter_by_lua_block   {;}
            log_by_lua_block           {;}

            proxy_http_version 1.1;
            proxy_set_header      TE                 $upstream_te;
            proxy_set_header      Host               $upstream_host;
            proxy_set_header      Upgrade            $upstream_upgrade;
            proxy_set_header      Connection         $upstream_connection;
            proxy_set_header      X-Forwarded-For    $upstream_x_forwarded_for;
            proxy_set_header      X-Forwarded-Proto  $upstream_x_forwarded_proto;
            proxy_set_header      X-Forwarded-Host   $upstream_x_forwarded_host;
            proxy_set_header      X-Forwarded-Port   $upstream_x_forwarded_port;
            proxy_set_header      X-Forwarded-Path   $upstream_x_forwarded_path;
            proxy_set_header      X-Forwarded-Prefix $upstream_x_forwarded_prefix;
            proxy_set_header      X-Real-IP          $remote_addr;
            proxy_pass_header     Server;
            proxy_pass_header     Date;
            proxy_ssl_name        $upstream_host;
            proxy_ssl_server_name on;
> if client_ssl then
            proxy_ssl_certificate ${{CLIENT_SSL_CERT}};
            proxy_ssl_certificate_key ${{CLIENT_SSL_CERT_KEY}};
> end            
            proxy_pass            $upstream_scheme://kong_upstream$upstream_uri;
        }

        location = /kong_error_handler {
            internal;
            default_type                 '';

            uninitialized_variable_warn  off;

            rewrite_by_lua_block {;}
            access_by_lua_block  {;}

            content_by_lua_block {
                Kong.handle_error()
            }
        }
    }

> if (role == "control_plane" or role == "traditional") and #admin_listeners > 0 then
    server {
        server_name kong_admin;
> for _, entry in ipairs(admin_listeners) do
        listen $(entry.listener);
> end

        access_log ${{ADMIN_ACCESS_LOG}};
        error_log  ${{ADMIN_ERROR_LOG}} ${{LOG_LEVEL}};

> if admin_ssl_enabled then
> for i = 1, #admin_ssl_cert do
        ssl_certificate     $(admin_ssl_cert[i]);
        ssl_certificate_key $(admin_ssl_cert_key[i]);
> end
        ssl_session_cache   shared:AdminSSL:10m;
> end

        # injected nginx_admin_* directives
> for _, el in ipairs(nginx_admin_directives) do
        $(el.name) $(el.value);
> end

        location / {
            default_type application/json;
            content_by_lua_block {
                Kong.admin_content()
            }
            header_filter_by_lua_block {
                Kong.admin_header_filter()
            }
        }

        location /nginx_status {
            internal;
            access_log off;
            stub_status;
        }

        location /robots.txt {
            return 200 'User-agent: *\nDisallow: /';
        }
    }
> end -- (role == "control_plane" or role == "traditional") and #admin_listeners > 0

    server {
        charset UTF-8;
        server_name kong_worker_events;
        listen unix:/usr/local/kong/worker_events.sock;
        access_log off;
        location / {
            content_by_lua_block {
            require("resty.events.compat").run()
            }
        }
    }

}